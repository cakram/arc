* use PG_GLOBAL flag for anything in the kernel addresss space and check all
  the TLB flushing is done properly

* look at how caching should work for memory-mapped I/O devices like the local
  APIC and I/O APIC

* the PMM should be reworked to also support contiguous regions of memory

* check if in*_p() and out*_p() are still required

* split features into local CPU features and features that all CPUs share

* I/O APIC interrupts don't seem to work at all in Bochs, keyboard IRQ (IRQ1)
  doesn't seem to work in QEMU

* elf64 size checks to check we don't read outside the bounds of the elf64 file

* free module pmm frames when they are loaded

* don't use PIT channel 2 for pit_mdelay(), using the KBC to check if the
  countdown has finished seems to be unreliable on modern hardware

* use enums in more places (e.g. heap node state)

* kernel heap should store last byte inclusive like the user heap

* add idle process and threads (one per cpu)

* use a more efficient user-space heap structure (red black tree?)

* consider interupt masking more in relation to locks (e.g. current solution
  won't work for exceptions as they aren't masked, and locks which don't mask
  interrupts should be added to improve performance where it isn't required.)

* there still seem to be locking issues on real hardware or in qemu with very
  high numbers of CPUs (in KVM mode)

* make TLB flushes more efficient e.g. by batching together more VMM operations

* implement spinlocks mostly in C, with only the xchg being in assembly

