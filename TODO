* use PG_GLOBAL flag for anything in the kernel addresss space and check all
  the TLB flushing is done properly

* look at how caching should work for memory-mapped I/O devices like the local
  APIC and I/O APIC

* the PMM should be reworked to also support contiguous regions of memory

* check if in*_p() and out*_p() are still required

* split features into local CPU features and features that all CPUs share

* I/O APIC interrupts don't seem to work at all in Bochs, keyboard IRQ (IRQ1)
  doesn't seem to work in QEMU

* elf64 size checks to check we don't read outside the bounds of the elf64 file

* free module pmm frames when they are loaded

* don't use PIT channel 2 for pit_mdelay(), using the KBC to check if the
  countdown has finished seems to be unreliable on modern hardware

* uniform memory flags (r,w,x (and user?)) type, and a way to convert it to
  page flags, so this is not duplicated in mmio, heap, uheap, vmm, etc. also use
  enums more (e.g. in the heap for the node state.)

* vmm should accept this uniform flag argument, so PG_* constants do not need
  to be used elsewhere in the code

* add idle process and threads (one per cpu)

* use a more efficient user-space heap structure (red black tree?)

* check how to save/register the GS base MSR during interrupt/syscall (SWAPGS?)

