* use PG_GLOBAL flag for anything in the kernel addresss space and check all
  the TLB flushing is done properly

* look at how caching should work for memory-mapped I/O devices like the local
  APIC and I/O APIC

* the PMM should be reworked to also support contiguous regions of memory

* check if in*_p() and out*_p() are still required

* split features into local CPU features and features that all CPUs share

* elf64 size checks to check we don't read outside the bounds of the elf64 file

* free module pmm frames when they are loaded

* don't use PIT channel 2 for pit_mdelay(), using the KBC to check if the
  countdown has finished seems to be unreliable on modern hardware

* use enums in more places (e.g. heap node state)

* add idle process and threads (one per cpu)

* use a more efficient user-space heap structure (red black tree?)

* consider interupt masking more in relation to locks (e.g. current solution
  won't work for exceptions as they aren't masked, and locks which don't mask
  interrupts should be added to improve performance where it isn't required.)

* make TLB flushes more efficient e.g. by batching together more VMM operations

* change tty_* -> trace_*, then make it so it can be backed by tty or uart,
  will be useful for debugging to see the whole log rather than just what fits
  into the 80x25 vga console (add trace=tty,uart|off param to cmdline)

* consider issue that proc and thread in cpu_t might not be consistent - is
  this going to cause problems? do we need any locking there also?

* make uheap_alloc() always zero memory it gives out, for security reasons. or
  should this be done by its callers?

* switch from NASM to GNU AS?

* route and handle NMIs (just by panic), need to consider a way to route LINTn
  interrupts, this will also help to fully support MP

* re-structure some of the headers (mainly mm and proc folders)

* x2APIC support in MADT parsing code

* MP tables NMI support (also ISA LINTn support?)

* merge lint.c and apic.c so messing around with making apic_read/write
  non-static, and moving some #defines to apic.h, isn't needed?

* tidy up repitition in the interrupt routing code

* make it so cmdline doesn't depend on a memory allocator... or use some kind
  of earlyalloc system where memory is reserved in the bss e.g. 4k or so (could
  be used for mmap too?)

